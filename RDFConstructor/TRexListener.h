#ifndef TREXLISTENER_H
#define TREXLISTENER_H

#include <TRex2/Packets/PubPkt.h>
#include <TRex2/Packets/SubPkt.h>
#include <TRex2/Engine/ResultListener.h>
#include "RDFResultListener.h"
#include "RDFConstructor.h"
#include "../RDFStore/RDFStore.h"
#include "../Common/RDFStructures.h"
#include <sstream>
#include <set>

//Forward declaration of the container of this class
class RDFConstructor;

/**
 * Listener class of TRex results, in charge of handling PubPkts and convert them into RDFEvents.
 * It is part of a RDFConstructor which acts as a container.
 */
class TRexListener: public ResultListener{
public:
	/**
	 * Constructor with the RDFConstructor container as parameter.
	 */
	TRexListener(RDFConstructor* constructor, const char** prefixesArray, int prefixesArrayLength);

	virtual ~TRexListener();
	
	/**
	 * Handles PubPkts, generated by TRex, and converts them into RDFEvents (lifting rule)
	 */
	virtual void handleResult(std::set<PubPkt *> &genPkts, double procTime);
	
	double getTotalProcessingNanoTime();

private:
	RDFConstructor *constructor; //the container of this listener
	const char** prefixesArray;
	int prefixesArrayLength;
	double totalProcessingTime;

	/**
	 * Notifies RDF output listeners, after having converted PubPkts into RDFEvents.
	 * After that, events are deleted. A copy by the listener must be done to preserve them.
	 */
	void notifyRDFListeners(RDFEvent* event);

	RDFEvent* createRDF(PubPkt* pkt, Template* templateCE);

	void createRDFAll(std::map<int, std::vector<PubPkt*> > typesOfGroupEvents, std::map<int, Template*> templates, std::vector<RDFEvent*> &results);
};
#endif /*TREXLISTENER_H*/
